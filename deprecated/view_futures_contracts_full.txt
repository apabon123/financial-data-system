#!/usr/bin/env python
"""
View Futures Contracts in Database

This script displays a summary of all futures contracts in the database,
with details like symbol, date range, and row counts.
"""

import os
import sys
import duckdb
import pandas as pd
from datetime import datetime, date
import re
import argparse
from rich.console import Console
from rich.table import Table
import logging
from pathlib import Path

# --- Imports needed for temporary update ---
# REMOVED: Unused imports causing ModuleNotFoundError
# from src.scripts.market_data.vix.update_vx_futures import (
#     download_cboe_data, 
#     prepare_data_for_db, 
#     update_market_data, 
#     ROOT_SYMBOL # Import ROOT_SYMBOL ('VX') if needed for queries
# )
# --- End temporary imports ---

# Database path
# REMOVED: Incorrect global DB_PATH variable. Path is handled in __main__.
# DB_PATH = "C:/temp/data/financial_data.duckdb" # Point back to original DB in temp location

# Configure logger
logger = logging.getLogger(__name__)

def get_futures_contracts(conn, pattern=None, interval_value=1, interval_unit='daily'):
    """Get a list of futures contracts matching the specified pattern and interval."""
    print(f"DEBUG: get_futures_contracts called with pattern: {pattern}, interval: {interval_value} {interval_unit}")
    
    # --- Determine target table based on pattern ---
    target_table = 'market_data' # Default table
    if pattern and (pattern == 'VX' or pattern.startswith('VX')):
        target_table = 'market_data_cboe'
        print(f"DEBUG: Targeting CBOE table: {target_table}")
    else:
        print(f"DEBUG: Targeting default table: {target_table}")
    # --- End target table determination ---
    
    # Base WHERE clause for interval matching
    interval_where_clause = f"AND interval_value = {interval_value} AND interval_unit = '{interval_unit}'"
    
    if pattern:
        if re.match(r'^[A-Z]{2,3}[FGHJKMNQUVXZ][0-9]{2}$', pattern):
            # Exact futures symbol
            query = f"""
                SELECT symbol
                FROM {target_table}
                WHERE symbol = '{pattern}'
                    {interval_where_clause}
                LIMIT 1
            """
            print(f"DEBUG: Using exact futures symbol match: {query}")
        elif pattern.startswith("^") and pattern.endswith("$"):
            # Regex pattern
            query = f"""
                SELECT DISTINCT symbol
                FROM {target_table}
                WHERE regexp_matches(symbol, '{pattern}')
                    {interval_where_clause}
                ORDER BY symbol
            """
            print(f"DEBUG: Using regex pattern: {query}")
        else:
            # Partial symbol match (base symbol) - Use LIKE for broader matching
            like_pattern = f'{pattern}%' # e.g., VX%
            query = f"""
                SELECT DISTINCT symbol
                FROM {target_table}
                WHERE symbol LIKE '{like_pattern}' 
                    {interval_where_clause}
                ORDER BY symbol
            """
            print(f"DEBUG: Using partial symbol match with LIKE pattern: {like_pattern}")
    else:
        # Default pattern for any standard futures contract (from market_data)
        target_table = 'market_data' # Override for default pattern - only check main table
        print(f"DEBUG: Overriding target table to {target_table} for default pattern.")
        query = f"""
            SELECT DISTINCT symbol
            FROM {target_table}
            WHERE regexp_matches(symbol, '^[A-Z]{2,3}[FGHJKMNQUVXZ][0-9]{2}$')
                {interval_where_clause}
            ORDER BY symbol
        """
        print(f"DEBUG: Using default futures pattern.")
    
    print(f"DEBUG: Executing query: {query}")
    
    try:
        result = conn.execute(query).fetchdf()
        print(f"DEBUG: Query returned {len(result)} rows")
        if not result.empty:
            print(f"DEBUG: First few symbols in result: {', '.join(result['symbol'].head().tolist())}")
        # Simplified check
        test_symbol = 'NQH25' if pattern != 'NQH25' else 'ESH25' # Avoid self-check if NQH25 is pattern
        if not result.empty and test_symbol in result['symbol'].values:
            print(f"DEBUG: {test_symbol} is in the result set")
        else:
            print(f"DEBUG: {test_symbol} is NOT in the result set")
        return result
    except Exception as e:
        print(f"DEBUG: Error executing query: {e}")
        return pd.DataFrame(columns=['symbol'])

def get_contract_details(conn, symbol, interval_value=1, interval_unit='daily'):
    """Get details for a specific futures contract at a specific interval."""
    db_interval_unit = interval_unit # Use the input unit directly
    
    # --- Determine target table based on symbol ---
    target_table = 'market_data' # Default table
    if symbol.startswith('VX'):
        target_table = 'market_data_cboe'
    print(f"DEBUG: get_contract_details targeting table: {target_table} for symbol {symbol}")
    # --- End target table determination ---
    
    # Use parameterized query
    query = f"""
        SELECT
            COUNT(*) as row_count,
            MIN(timestamp)::DATE as first_date,  -- Cast to DATE for consistency
            MAX(timestamp)::DATE as last_date,   -- Cast to DATE for consistency
            ROUND(AVG(high-low), 4) as avg_range -- Increased precision for range
        FROM {target_table}
        WHERE symbol = ?
            AND interval_value = ?
            AND interval_unit = ?
    """
    
    params = [symbol, int(interval_value), db_interval_unit]

    try:
        result = conn.execute(query, params).fetchone()
        # Adjust result tuple index since volume was removed
        # Original: (row_count, first_date, last_date, avg_range, avg_volume) -> len 5
        # New:      (row_count, first_date, last_date, avg_range)            -> len 4
        
        # Pad with None for missing avg_volume to maintain structure downstream
        if result is not None:
            result_padded = result + (None,) # Add None for avg_volume
        else:
            result_padded = (0, None, None, None, None) # Default error tuple

        # print(f"DEBUG: Details for {symbol} ({interval_value}{interval_unit}): {result_padded}")
        return result_padded
    except Exception as e:
        print(f"Error getting contract details for {symbol}: {e}")
        # Return a tuple matching the expected structure but with error indicators
        return (0, None, None, None, None)

def parse_futures_symbol(symbol):
    """Parse a futures symbol into its components."""
    # Match the typical futures symbol pattern
    match = re.match(r'^([A-Z]{2,3})([FGHJKMNQUVXZ])([0-9]{2})$', symbol)
    
    if not match:
        print(f"DEBUG: Could not parse symbol: {symbol}")
        return None
    
    base_symbol, month_code, year_code = match.groups()
    
    # Convert month code to month name
    month_map = {
        'F': 'January',
        'G': 'February', 
        'H': 'March',
        'J': 'April',
        'K': 'May',
        'M': 'June',
        'N': 'July',
        'Q': 'August',
        'U': 'September',
        'V': 'October',
        'X': 'November',
        'Z': 'December'
    }
    
    month_name = month_map.get(month_code, 'Unknown')
    
    # Convert 2-digit year to 4-digit year
    year_num = int(year_code)
    if year_num < 50:  # Assume 20xx for years less than 50
        year = 2000 + year_num
    else:  # Assume 19xx for years 50 and greater
        year = 1900 + year_num
    
    # Debug: Print when parsing NQH25
    if symbol == 'NQH25':
        print(f"DEBUG: Parsed NQH25 as {base_symbol} {month_name} {year}")
    
    return {
        'base_symbol': base_symbol,
        'month_code': month_code,
        'month_name': month_name,
        'year_code': year_code,
        'year': year,
        'full_name': f"{base_symbol} {month_name} {year}"
    }

def add_placeholder_contracts(conn, symbols):
    """Add placeholder entries for futures contracts that aren't in the database yet."""
    print(f"\nAdding placeholder entries for missing contracts: {', '.join(symbols)}")
    
    today = date.today()
    
    for symbol in symbols:
        # Parse the symbol
        parsed = parse_futures_symbol(symbol)
        if not parsed:
            print(f"Could not parse symbol: {symbol}")
            continue
        
        # Check if the contract already exists
        check_query = f"""
            SELECT COUNT(*) FROM market_data 
            WHERE symbol = '{symbol}'
        """
        count = conn.execute(check_query).fetchone()[0]
        
        if count > 0:
            print(f"Contract {symbol} already exists with {count} rows")
            continue
        
        # Create a placeholder entry for today's date
        timestamp = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        # Insert a single placeholder row
        insert_query = f"""
            INSERT INTO market_data (
                timestamp, symbol, open, high, low, close, settle,
                volume, interval_value, interval_unit, source, quality
            ) VALUES (
                '{timestamp}', '{symbol}', 0, 0, 0, 0, 0, 
                0, 1, 'daily', 'Placeholder', 0
            )
        """
        try:
            conn.execute(insert_query)
            print(f"Added placeholder entry for {symbol} ({parsed['full_name']})")
        except Exception as e:
            print(f"Error adding placeholder for {symbol}: {e}")
    
    print("Done adding placeholders\n")

def format_value(value) -> str:
    """Helper function to format table cell values nicely."""
    if pd.isna(value):
        return "[dim]N/A[/dim]"
    if isinstance(value, (int, float)):
        if abs(value) > 1_000_000_000:
            return f"{value / 1_000_000_000:.2f}B"
        if abs(value) > 1_000_000:
             return f"{value / 1_000_000:.2f}M"
        if abs(value) > 1_000:
             return f"{value / 1_000:.1f}K"
        if isinstance(value, float):
            return f"{value:.4f}" 
    return str(value)

def list_futures_contracts(base_symbol=None, add_missing=False, interval_value=1, interval_unit='daily', conn=None):
    """List futures contracts with details."""
    # This function now directly receives interval parameters
    print(f"DEBUG: list_futures_contracts called with base: {base_symbol}, iv: {interval_value}, iu: {interval_unit}")
    
    if conn is None:
        print("Error: Database connection not provided.")
        return

    # Get contracts based on base_symbol (pattern) and interval
    contracts_df = get_futures_contracts(conn, base_symbol, interval_value, interval_unit)

    if contracts_df.empty:
        print(f"No contracts found matching pattern: {base_symbol or '[All Futures]'} for {interval_value} {interval_unit}")
        return

    # Ensure get_contract_details is called with the correct interval
    contract_details = [get_contract_details(conn, symbol, interval_value, interval_unit) 
                        for symbol in contracts_df['symbol']]

    # ... (rest of the function processing contracts_df using interval_value/interval_unit) ...
    # ... (table creation and printing) ...

# Placeholder for temporary update function (if still needed, otherwise remove)
# def temporary_update_contract(conn, symbol, contract_details):
#     # ... (implementation) ...

if __name__ == "__main__":
    # --- Argument Parsing --- #
    parser = argparse.ArgumentParser(description="View futures contract details stored in the database.")
    parser.add_argument('base_symbol', nargs='?', default=None, help='Optional base symbol (e.g., ES, NQ, VX) or specific contract (e.g., ESH24) to filter by.')
    parser.add_argument("--add-missing", action="store_true", help="Attempt to add missing placeholder contracts (Use with caution). Currently disabled.")
    parser.add_argument("--db-path", default="data/financial_data.duckdb", help="Path to the DuckDB database file.")
    # Add arguments for interval - support both hyphenated and underscore versions for compatibility
    parser.add_argument("--interval_value", "--interval-value", type=int, default=1, help="Interval value (e.g., 1, 15).")
    parser.add_argument("--interval_unit", "--interval-unit", type=str, default='daily', choices=['min', 'minute', 'daily', 'weekly', 'monthly'], help="Interval unit (e.g., daily, min).")
    
    args = parser.parse_args()

    # --- Database Connection --- #
    db_file = Path(args.db_path).resolve() # Use Path object for better handling
    if not db_file.exists():
        print(f"Error: Database file not found at {db_file}")
        sys.exit(1)
    
    conn = None # Initialize conn
    try:
        conn = duckdb.connect(database=str(db_file), read_only=True) # Connect read-only by default
        print(f"Connected to database: {db_file}")
        
        # --- Call Listing Function with Parsed Args --- #
        # Normalize interval unit aliases
        normalized_interval_unit = args.interval_unit
        if normalized_interval_unit == 'min':
            normalized_interval_unit = 'minute' # Normalize min to minute if needed
            
        list_futures_contracts(
            base_symbol=args.base_symbol, 
            add_missing=args.add_missing, 
            interval_value=args.interval_value, 
            interval_unit=normalized_interval_unit, # Use the parsed and normalized value
            conn=conn
        )

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        if conn:
            conn.close()
            print("Database connection closed.")

